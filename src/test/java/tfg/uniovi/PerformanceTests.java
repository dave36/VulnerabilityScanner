package tfg.uniovi;

import static org.hamcrest.Matchers.equalTo;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.assertTrue;

import java.net.URL;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.boot.context.embedded.LocalServerPort;
import org.springframework.boot.test.TestRestTemplate;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.web.client.RestTemplate;

@SuppressWarnings("deprecation")
@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment=WebEnvironment.RANDOM_PORT)
@AutoConfigureMockMvc
public class PerformanceTests {
	
	@LocalServerPort
	private int port;
	
	private RestTemplate template;
	private URL url;
	
	private static final int MAX_TIME_PER_SCAN = 60;
	
	@Before
	public void setUp() throws Exception {
		this.url = new URL("http://localhost:" + port + "/");
		template = new TestRestTemplate();
	}
	
	@Test
	public void testTimeApachePage() {
		long t1 = System.currentTimeMillis();
		ResponseEntity<String> response = template.getForEntity(url.toString() + "apacheScan?url=http://www.webscantest.com/", String.class);
		long t2 = System.currentTimeMillis();
		assertThat(response.getStatusCode(), equalTo(HttpStatus.OK));
		assertTrue("Scan long too much", (t2-t1)/1000 < MAX_TIME_PER_SCAN);
	}
	
	@Test
	public void testTimeApacheBadPage() {
		long t1 = System.currentTimeMillis();
		ResponseEntity<String> response = template.getForEntity(url.toString() + "apacheScan?url=http://www.webscantest.com/", String.class);
		long t2 = System.currentTimeMillis();
		assertThat(response.getStatusCode(), equalTo(HttpStatus.OK));
		assertTrue("Scan long too much", (t2-t1)/1000 < MAX_TIME_PER_SCAN);
	}
	
	@Test
	public void testTimeApachePageWrongURL() {
		long t1 = System.currentTimeMillis();
		ResponseEntity<String> response = template.getForEntity(url.toString() + "apacheScan?url=estonoesunaurl123", String.class);
		long t2 = System.currentTimeMillis();
		assertThat(response.getStatusCode(), equalTo(HttpStatus.OK));
		assertTrue("Scan long too much", (t2-t1)/1000 < MAX_TIME_PER_SCAN);
	}
	
	@Test
	public void testTimeMicrosoftPage() {
		long t1 = System.currentTimeMillis();
		ResponseEntity<String> response = template.getForEntity(url.toString() + "microsoftiisScan?url=http://testasp.vulnweb.com/", String.class);
		long t2 = System.currentTimeMillis();
		assertThat(response.getStatusCode(), equalTo(HttpStatus.OK));
		assertTrue("Scan long too much", (t2-t1)/1000 < MAX_TIME_PER_SCAN);
	}
	
	@Test
	public void testTimeMicrosoftBadPage() {
		long t1 = System.currentTimeMillis();
		ResponseEntity<String> response = template.getForEntity(url.toString() + "microsoftiisScan?url=http://testasp.vulnweb.com/", String.class);
		long t2 = System.currentTimeMillis();
		assertThat(response.getStatusCode(), equalTo(HttpStatus.OK));
		assertTrue("Scan long too much", (t2-t1)/1000 < MAX_TIME_PER_SCAN);
	}
	
	@Test
	public void testTimeMicrosoftPageWrongURL() {
		long t1 = System.currentTimeMillis();
		ResponseEntity<String> response = template.getForEntity(url.toString() + "microsoftiisScan?url=estonoesunaurl123", String.class);
		long t2 = System.currentTimeMillis();
		assertThat(response.getStatusCode(), equalTo(HttpStatus.OK));
		assertTrue("Scan long too much", (t2-t1)/1000 < MAX_TIME_PER_SCAN);
	}
	
	@Test
	public void testTimeNginxPage() {
		long t1 = System.currentTimeMillis();
		ResponseEntity<String> response = template.getForEntity(url.toString() + "nginxScan?url=http://testhtml5.vulnweb.com/#/popular", String.class);
		long t2 = System.currentTimeMillis();
		assertThat(response.getStatusCode(), equalTo(HttpStatus.OK));
		assertTrue("Scan long too much", (t2-t1)/1000 < MAX_TIME_PER_SCAN);
	}
	
	@Test
	public void testTimeNginxBadPage() {
		long t1 = System.currentTimeMillis();
		ResponseEntity<String> response = template.getForEntity(url.toString() + "nginxScan?url=http://testhtml5.vulnweb.com/#/popular", String.class);
		long t2 = System.currentTimeMillis();
		assertThat(response.getStatusCode(), equalTo(HttpStatus.OK));
		assertTrue("Scan long too much", (t2-t1)/1000 < MAX_TIME_PER_SCAN);
	}
	
	@Test
	public void testTimeNginxPageWrongURL() {
		long t1 = System.currentTimeMillis();
		ResponseEntity<String> response = template.getForEntity(url.toString() + "nginxScan?url=estonoesunaurl123", String.class);
		long t2 = System.currentTimeMillis();
		assertThat(response.getStatusCode(), equalTo(HttpStatus.OK));
		assertTrue("Scan long too much", (t2-t1)/1000 < MAX_TIME_PER_SCAN);
	}
	
}
