package tfg.uniovi;

import static org.hamcrest.Matchers.containsString;
import static org.hamcrest.Matchers.equalTo;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThat;

import java.net.URL;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.embedded.LocalServerPort;
import org.springframework.boot.test.TestRestTemplate;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.web.client.RestTemplate;

import tfg.uniovi.controllers.ScanController;

@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment=WebEnvironment.RANDOM_PORT)
@AutoConfigureMockMvc
public class VulnerabilityScannerApplicationTests {

	@Autowired
	private MockMvc mvc;
	
	@MockBean
	private ScanController controller;
	
	@LocalServerPort
	private int port;
	
	private RestTemplate template;
	private URL url;
	
	@Before
	public void setUp() throws Exception {
		this.url = new URL("http://localhost:" + port + "/");
		template = new TestRestTemplate();
	}

//	@Test
//	public void testPage() throws Exception {
//		mvc.perform(get("localhost:8080/apacheScan?url=http://crackme.trustwave.com/kelev/view/home.php")
//				.contentType(APPLICATION_JSON))
//				.andExpect(status().isOk());
//	}
	
	@Test
	public void testPageStatus() {
		ResponseEntity<String> response = template.getForEntity(url.toString() + "apacheScan?url=http://crackme.trustwave.com/kelev/view/home.php", String.class);
		System.out.println("---------------------------------------------------------");
		System.out.println(response.toString());
		assertThat(response.getStatusCode(), equalTo(HttpStatus.OK));
	}

	@Test
	public void testPageNotNull() {
		ResponseEntity<String> response = template.getForEntity("http://localhost:1841", String.class);
		assertNotNull(response);
	}
	
	@Test
	public void testPageContent() {
		ResponseEntity<String> response = template.getForEntity("http://localhost:1841", String.class);
		assertThat(response.getBody(), containsString("Vulnerability"));
	}
	
}
