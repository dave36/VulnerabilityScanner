package tfg.uniovi.controller;

import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.activiti.engine.RuntimeService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import tfg.uniovi.model.Vulnerability;
import tfg.uniovi.repository.Vulnerabilities;

@RestController
@EnableAutoConfiguration
@CrossOrigin
public class ScanController {
	
	@Autowired
	private RuntimeService runtimeService;
	
	@RequestMapping(value = "/wordpressScan")
	public ResponseEntity<List<Vulnerability>> wordpressScan(@RequestParam String url) {
		init();
		Map<String, Object> variables = new HashMap<>();
		variables.put("url", url);
		runtimeService.startProcessInstanceByKey("wordpressScan", variables);
		List<Vulnerability> vulns = Vulnerabilities.getInstance().getVulnerabilities();
		return new ResponseEntity<>(vulns, HttpStatus.OK);
	}
	
	@RequestMapping(value = "/joomlaScan")
	public ResponseEntity<List<Vulnerability>> joomlaScan(@RequestParam String url) {
		init();
		Map<String, Object> variables = new HashMap<>();
		variables.put("url", url);
		runtimeService.startProcessInstanceByKey("joomlaScan", variables);
		List<Vulnerability> vulns = Vulnerabilities.getInstance().getVulnerabilities();
		return new ResponseEntity<>(vulns, HttpStatus.OK);
	}
	
	@RequestMapping(value = "/wordpressScan2")
	public ResponseEntity<List<Vulnerability>> wordpressScan2(@RequestParam String url) {
		init();
		Map<String, Object> variables = new HashMap<>();
		variables.put("url", url);
		runtimeService.startProcessInstanceByKey("wordpressScan2", variables);
		List<Vulnerability> vulns = Vulnerabilities.getInstance().getVulnerabilities();
		return new ResponseEntity<>(vulns, HttpStatus.OK);
	}
	
	@RequestMapping(value = "/apacheScan")
	public ResponseEntity<List<Vulnerability>> apacheScan(@RequestParam String url) {
		init();
		Map<String, Object> variables = new HashMap<>();
		variables.put("url", url);
		runtimeService.startProcessInstanceByKey("apacheScan", variables);
		List<Vulnerability> vulns = Vulnerabilities.getInstance().getVulnerabilities();
		return new ResponseEntity<>(vulns, HttpStatus.OK);
	}
	
	@RequestMapping(value = "/nginxScan")
	public ResponseEntity<List<Vulnerability>> nginxScan(@RequestParam String url) {
		init();
		Map<String, Object> variables = new HashMap<>();
		variables.put("url", url);
		runtimeService.startProcessInstanceByKey("nginxScan", variables);
		List<Vulnerability> vulns = Vulnerabilities.getInstance().getVulnerabilities();
		return new ResponseEntity<>(vulns, HttpStatus.OK);
	}
	
	@RequestMapping(value = "/microsoftiisScan")
	public ResponseEntity<List<Vulnerability>> microsoftiisScan(@RequestParam String url) {
		init();
		Map<String, Object> variables = new HashMap<>();
		variables.put("url", url);
		runtimeService.startProcessInstanceByKey("microsoftScan", variables);
		List<Vulnerability> vulns = Vulnerabilities.getInstance().getVulnerabilities();
		return new ResponseEntity<>(vulns, HttpStatus.OK);
	}
	
	public void init() {
		File dir = new File("src/main/resources/outputs");
		for (File file : dir.listFiles())
			file.delete();
		
		if (Vulnerabilities.getInstance().getVulnerabilities().size() > 0)
			Vulnerabilities.getInstance().getVulnerabilities().clear();
	}
	
}
