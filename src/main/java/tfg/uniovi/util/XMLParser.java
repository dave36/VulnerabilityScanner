package tfg.uniovi.util;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import tfg.uniovi.model.dto.ServerDTO;

public class XMLParser {

	public static ServerDTO parse(String fileName, String tagName, String nodeTagName) throws FileNotFoundException {
		try {
			DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
			DocumentBuilder db = dbf.newDocumentBuilder();
			File file = new File("src/main/resources/" + fileName);

			if (file.exists()) {
				Document doc = db.parse(file);
				Element docElem = doc.getDocumentElement();
				NodeList list = docElem.getElementsByTagName(tagName);
				
				// Listas auxiliares para almacenar los nombres de servidor y cms con sus versiones
				List<String> names = new ArrayList<>();
				List<Double> versions = new ArrayList<>();
				
				if (list != null && list.getLength() > 0) {
					for (int i=0; i < list.getLength(); i++) {
						Node node = list.item(i);
						if (node.getNodeType() == Node.ELEMENT_NODE) {
							NodeList nameList = ((Element) node).getElementsByTagName("name");
							NodeList versionList = ((Element) node).getElementsByTagName("version");
							if (nameList.getLength() > 0 && versionList.getLength() > 0) {
								String name = nameList.item(0).getChildNodes().item(0).getNodeValue();
								names.add(name);
								String version = versionList.item(0).getChildNodes().item(0).getNodeValue();
								versions.add(Double.valueOf(version));
							}
						}
					}
				}
				return createServer(names, versions);
			} else {
				System.err.println("El fichero " + fileName + " no contiene ning√∫n elemento con la etiqueta " + tagName);
			}
		} catch (Exception e) {
			throw new FileNotFoundException("El fichero " + fileName + " no existe");
		}
		return null;
	}

	private static ServerDTO createServer(List<String> names, List<Double> versions) {
		ServerDTO server;
		if (names.size() > 1) {
			server = new ServerDTO(names.get(0), versions.get(0), names.get(1), versions.get(1));
		}
		else {
			server = new ServerDTO(names.get(0), versions.get(0));
		}
		return server;
	}
	
}
